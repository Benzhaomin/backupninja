# -*- mode: sh; sh-basic-offset: 3; indent-tabs-mode: nil; -*-
#
# PostgreSQL handler script for backupninja
#

getconf backupdir /var/backups/postgres
getconf databases all
getconf compress yes
getconf vsname

localhost=`hostname`

# Decide if the handler should operate on a vserver or on the host.
# In the former case, check that $vsname exists and is running.
local usevserver=no
local vroot
if [ $vservers_are_available = yes ]; then
   if [ -n "$vsname" ]; then
      # does it exist ?
      if ! vservers_exist "$vsname" ; then
         fatal "The vserver given in vsname ($vsname) does not exist."
      fi
      # is it running ?
      $VSERVERINFO -q $vsname RUNNING
      if [ $? -ne 0 ]; then
         fatal "The vserver $vsname is not running."
      fi
      # everything ok
      info "Using vserver '$vsname'."
      usevserver=yes
      vroot="$VROOTDIR/$vsname"
   else
      info "No vserver name specified, actions will be performed on the host."
   fi
fi

# Make sure that the system to backup has the needed executables
if [ $usevserver = yes ]; then
   debug "Examining vserver '$vsname'."
   if [ "$databases" == "all" ]; then
      [ -x "$vroot`$VSERVER $vsname exec which $PGSQLDUMPALL`" ] || \
	 fatal "Can't find $PGSQLDUMPALL in vserver $vsname."
   else
      [ -x "$vroot`$VSERVER $vsname exec which $PGSQLDUMP`" ] || \
	 fatal "Can't find $PGSQLDUMP in vserver $vsname."
   fi
else
   if [ "$databases" == "all" ]; then
      [ -x "`which $PGSQLDUMPALL`" ] || \
	 fatal "Can't find $PGSQLDUMPALL."
   else
      [ -x "`which $PGSQLDUMP`" ] || \
	 fatal "Can't find $PGSQLDUMP."
   fi
fi

# create backup dir, the vroot variable will be empty if no vsname was specified
# and will proceed to operate on the host
[ -d $vroot$backupdir ] || (debug "mkdir -p $vroot$backupdir"; mkdir -p $vroot$backupdir)
[ -d $vroot$backupdir ] || fatal "Backup directory '$vroot$backupdir'"

# give backup dir the good uid and permissions
# (in respect to the vserver, if $usevserver = yes)
pguid=`getent passwd postgres | awk -F: '{print $3}'`
[ -n "$pguid" ] || \
    fatal "No user called postgres`[ $usevserver = no ] || echo \" on vserver $vsname\"`."
debug "chown $pguid $vroot$backupdir"
chown $pguid $vroot$backupdir
debug "chmod 700 $vroot$backupdir"
chmod 700 $vroot$backupdir

# if $databases = all, use pg_dumpall
if [ "$databases" == "all" ]; then
    if [ $usevserver = yes ]; then
	execstr='$VSERVER $vsname exec su - postgres -c "$PGSQLDUMPALL > $backupdir/${vsname}.sql"'
    else
	execstr='su - postgres -c "$PGSQLDUMPALL > $backupdir/${localhost}-all.sql"'
    fi
    debug "$execstr"
    if [ ! $test ]; then
       output=`$execstr 2>&1`
       code=$?
	if [ "$code" == "0" ]; then
	    debug $output
	    info "Successfully finished dump of pgsql cluster"
	else
	    warning $output
	    warning "Failed to dump pgsql cluster"
	fi
    fi
    
# else use pg_dump on each specified database
else
    for db in $databases; do
	if [ $usevserver = yes ]
	    then
	    execstr='$VSERVER $vsname exec su - postgres -c "$PGSQLDUMP $db > $backupdir/${db}.sql"'
	else
	    execstr='su - postgres -c "$PGSQLDUMP $db > $backupdir/${db}.sql"'
	fi
	debug "$execstr"
	if [ ! $test ]; then
	    output=`$execstr 2>&1`
	    code=$?
	    if [ "$code" == "0" ]; then
		debug $output
		info "Successfully finished dump of pgsql database ${db}"
	    else
		warning $output
		warning "Failed to dump pgsql database ${db}"
	    fi
	fi
    done
fi

if [ "$compress" == "yes" ]; then
    output=`$GZIP -f $vroot$backupdir/*.sql 2>&1`
    debug $output
fi

return 0

