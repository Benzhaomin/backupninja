# -*- mode: sh; sh-basic-offset: 3; indent-tabs-mode: nil; -*-
#
# duplicity script for backupninja
# requires duplicity
#

getconf options
getconf testconnect yes
getconf nicelevel 0

setsection gpg
getconf password
getconf sign no
getconf encryptkey
getconf signkey

setsection source
getconf include
getconf vsnames all
getconf vsinclude
getconf exclude

setsection dest
getconf incremental yes
getconf keep 60
getconf sshoptions
getconf bandwidthlimit 0
getconf desthost
getconf destdir
getconf destuser
destdir=${destdir%/}

[ "$destdir" != "" ] || fatal "Destination directory not set"
[ "$include" != "" ] || fatal "No source includes specified"

### vservers stuff ###
local usevserver=no
# If vservers are configured, check that the ones listed in $vsnames do exist.
if [ $vservers_are_available = yes ]; then
   if [ "$vsnames" = all ]; then
      vsnames="$found_vservers"
   else
      if ! vservers_exist "$vsnames" ; then
            fatal "At least one of the vservers listed in vsnames ($vsnames) does not exist."
      fi
   fi
   if [ -n "$vsinclude" ]; then
      info "Using vservers '$vsnames'"
      usevserver=yes
   fi
else
   [ -z "$vsinclude" ] || warning 'vservers support disabled in backupninja.conf, vsincludes configuration lines will be ignored'
   [ -z "$vsnames" ] || warning 'vservers support disabled in backupninja.conf, vsnames configuration line will be ignored'   
fi

### see if we can login ###

if [ "$testconnect" == "yes" ]; then
    debug "ssh $sshoptions -o PasswordAuthentication=no $desthost -l $destuser 'echo -n 1'"
    if [ ! $test ]; then
	result=`ssh $sshoptions -o PasswordAuthentication=no $desthost -l $destuser 'echo -n 1'`
	if [ "$result" != "1" ]; then
	    fatal "Can't connect to $desthost as $destuser."
	else
	    debug "Connected to $desthost as $destuser successfully"
	fi
    fi
fi

### COMMAND-LINE MANGLING ###

scpoptions="$sshoptions"
[ "$bandwidthlimit" == 0 ] || scpoptions="$scpoptions -l $bandwidthlimit"

execstr="$options --no-print-statistics --scp-command 'scp $scpoptions' --ssh-command 'ssh $sshoptions' "

# deal with symmetric or asymmetric (public/private key pair) encryption
if [ -n "$encryptkey" ]; then
    execstr="${execstr}--encrypt-key $encryptkey "
    debug "Data will be encrypted with the GnuPG key $encryptkey."
else
    [ -n "$password" ] || fatal "The password option must be set when using symmetric encryption."
    debug "Data will be encrypted using symmetric encryption."
fi

# deal with data signing
if [ "$sign" == yes ]; then
    # duplicity is not able to sign data when using symmetric encryption
    [ -n "$encryptkey" ] || fatal "The encryptkey option must be set when signing."
    # if needed, initialize signkey to a value that is not empty (checked above)
    [ -n "$signkey" ] || signkey="$encryptkey"
    # check password validity
    [ -n "$password" ] || fatal "The password option must be set when signing."
    execstr="${execstr}--sign-key $signkey "
    debug "Data will be signed will the GnuPG key $signkey."
else
    debug "Data won't be signed."
fi

if [ "$keep" != "yes" ]; then
    if [ "`echo $keep | tr -d 0-9`" == "" ]; then
	keep="${keep}D"
    fi
    execstr="${execstr}--remove-older-than $keep "
fi

if [ "$incremental" == "no" ]; then
    execstr="${execstr}--full "
fi

execstr_serverpart="scp://$destuser@$desthost/$destdir"
execstr_clientpart="/"

### SOURCE ###

# excludes
for i in "$exclude"; do
	str="${i//__star__/*}"
	execstr="${execstr}--exclude '$str' "
done
	
# includes 
for i in "$include"; do
	str="${i//__star__/*}"
	execstr="${execstr}--include '$str' "
done

# vsincludes
if [ $usevserver = yes ]; then
    for vserver in $vsnames; do
	for vi in "$vsinclude"; do
	    str="${vi//__star__/*}"
	    execstr="${execstr}--include '$VROOTDIR/$vserver$str' "
	done
    done
fi

### EXECUTE ###

# exclude everything else, start with root
#execstr="${execstr}--exclude '**' / "
		
# include client-part and server-part
#execstr="$execstr $execstr_serverpart"

execstr=${execstr//\\*/\\\\\\*}

debug "duplicity $execstr --exclude '**' / $execstr_serverpart"
if [ ! $test ]; then
        export PASSPHRASE=$password
	output=`nice -n $nicelevel \
                  su -c \
                    "duplicity $execstr --exclude '**' / $execstr_serverpart 2>&1"`
	code=$?
	if [ $code -eq 0 ]; then
		debug $output
		info "Duplicity finished successfully."
	else
		debug $output
		fatal "Duplicity failed."
	fi
fi	

return 0
